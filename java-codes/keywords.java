

public class keywords {
    public static void main(String[] args) {
        System.out.println("Keyword\tUsage\r\n" + //
                        "abstract\tSpecifies that a class or method will be implemented later, in a subclass \r\n" + //
                        "assert\tAssert describes a predicate placed in a Java program to indicate that the developer thinks that the predicate is always true at that place.\r\n" + //
                        "boolean\tA data type that can hold True and False values only \r\n" + //
                        "break\tA control statement for breaking out of loops.\r\n" + //
                        "byte\tA data type that can hold 8-bit data values \r\n" + //
                        "case\tUsed in switch statements to mark blocks of text\r\n" + //
                        "catch\tCatches exceptions generated by try statements\r\n" + //
                        "char\tA data type that can hold unsigned 16-bit Unicode characters\r\n" + //
                        "class\tDeclares a new class\r\n" + //
                        "continue\tSends control back outside a loop \r\n" + //
                        "default\tSpecifies the default block of code in a switch statement\r\n" + //
                        "do\tStarts a do-while loop\r\n" + //
                        "double\tA data type that can hold 64-bit floating-point numbers\r\n" + //
                        "else\tIndicates alternative branches in an if statement \r\n" + //
                        "enum\tA Java keyword is used to declare an enumerated type. Enumerations extend the base class.\r\n" + //
                        "extends\tIndicates that a class is derived from another class or interface \r\n" + //
                        "final\tIndicates that a variable holds a constant value or that a method will not be overridden\r\n" + //
                        "finally\tIndicates a block of code in a try-catch structure that will always be executed\r\n" + //
                        "float\tA data type that holds a 32-bit floating-point number \r\n" + //
                        "for\tUsed to start a for loop\r\n" + //
                        "if\tTests a true/false expression and branches accordingly\r\n" + //
                        "implements\tSpecifies that a class implements an interface \r\n" + //
                        "import\tReferences other classes\r\n" + //
                        "instanceof\tIndicates whether an object is an instance of a specific class or implements an interface \r\n" + //
                        "int\tA data type that can hold a 32-bit signed integer \r\n" + //
                        "interface\tDeclares an interface\r\n" + //
                        "long\tA data type that holds a 64-bit integer\r\n" + //
                        "native\tSpecifies that a method is implemented with native (platform-specific) code \r\n" + //
                        "new\tCreates new objects \r\n" + //
                        "null\tThis indicates that a reference does not refer to anything \r\n" + //
                        "package\tDeclares a Java package\r\n" + //
                        "private\tAn access specifier indicating that a method or variable may be accessed only in the class it’s declared in\r\n" + //
                        "protected\tAn access specifier indicating that a method or variable may only be accessed in the class it’s declared in (or a subclass of the class it’s declared in or other classes in the same package)\r\n" + //
                        "public\tAn access specifier used for classes, interfaces, methods, and variables indicating that an item is accessible throughout the application (or where the class that defines it is accessible)\r\n" + //
                        "return\tSends control and possibly a return value back from a called method \r\n" + //
                        "short\tA data type that can hold a 16-bit integer \r\n" + //
                        "static\tIndicates that a variable or method is a class method (rather than being limited to one particular object)\r\n" + //
                        "strictfp\tA Java keyword is used to restrict the precision and rounding of floating-point calculations to ensure portability.\r\n" + //
                        "super\tRefers to a class’s base class (used in a method or class constructor) \r\n" + //
                        "switch\tA statement that executes code based on a test value \r\n" + //
                        "synchronized\tSpecifies critical sections or methods in multithreaded code\r\n" + //
                        "this\tRefers to the current object in a method or constructor \r\n" + //
                        "throw\tCreates an exception \r\n" + //
                        "throws\tIndicates what exceptions may be thrown by a method \r\n" + //
                        "transient\tSpecifies that a variable is not part of an object’s persistent state\r\n" + //
                        "try\tStarts a block of code that will be tested for exceptions \r\n" + //
                        "void\tSpecifies that a method does not have a return value\r\n" + //
                        "volatile\tThis indicates that a variable may change asynchronously\r\n" + //
                        "while\tStarts a while loop\r\n" + //
                        "sealed\r\n" + //
                        "\r\n" + //
                        "The sealed keyword is used to declare a class as “sealed,” meaning it restricts which classes can extend it.\r\n" + //
                        "\r\n" + //
                        "permits\r\n" + //
                        "\r\n" + //
                        "The permits keyword is used within a sealed class declaration to specify the subclasses that are permitted to extend it.");
    }
    
}
